To initialise git you use command: 
git init 

To add a file to the staging area you use the line below. Files have three states, modified, staged and committed. The below puts it in staging.
git add <filename>

You use git commit to commit a file. You need to provide a message alongside this every time you do it. You do this using -m and then a string followed by quotation marks: 
git commit -m "Add main text page" 

Reviewing history uses 
git log 

You can see the new lines added using this command 
git log -p 

To get out of git log -p, you just have to press q. 

If you pass a directory name to git add, it will stage all the files that directory contains: git add mydir

You can specify the current directory with .. So git add . will stage all files in the current directory, and all its subdirectories.

You can stage changes to all tracked files (files you've added in a previous commit) with the -a option to git commit. So if you've changed two files that are already tracked, you can stage and commit the changes in a single command with git commit -a -m "My message". (This can also be shortened to git commit -am "My message".)
To prevent accidentally committing the wrong files, the -a option does not add "untracked" files; files that have never been committed before. You'll need to stage those with git add first.

To view changes before you stage them you can use git diff to "show differences". 

You can view changes which have been staged, but not committed using: 
git diff --staged 

Say you wanted to delete a file from your project, and you want to make this delete part of a commit. To do this, you use: 
git rm <filename>

In this way, you can "commit" a delete of a file to your repository. After you've done this, you can commit as usual. 

git mv allows you to move files. If you saved a file with a wrong extension, you can type the name of the file you want to move, and the name of the file you want to move it to: 
git mv example.txt example.html 

The line above is effectively a rename. You can then commit the change as usual. 

If you've staged a mistake, you can unstage with: 
git reset HEAD <filename> 

The above will demote the file from the staged area into the modified one. If you want to discard changes to a modified file: 
git checkout -- <filename> 

The above will overwrite the specified file with it's last committed version. This cannot be undone. 